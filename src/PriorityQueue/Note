-------------------------- Binary Heap & Priority Queue --------------------------

     # Priority Queue
       Sebuah struktur data queue dimana elemen yang pertama kali keluar adalah
       elemen dengan prioritas tertinggi, diikuti dengan urutan memasukkan data
       ke dalam queue. Sehingga konsep First In First Out hanya berlaku pada
       elemen-elemen yang memiliki prioritas yang sama. Untuk elemen lain yang
       memiliki prioritas lebih rendah, maka akan dikeluarkan paling akhir sesuai
       urutan prioritas. Prioritas dapat dibentuk dengan mempertimbangkan nilai
       dari masing-masing elemen yang ada pada queue.

     # Binary Heap
       Sebuah struktur data tree dimana nilai dari setiap node yang ada harus
       selalu lebih kecil/besar daripada child node nya. Ada dua jenis binary
       heap yaitu Min Heap yang setiap node nya selalu lebih kecil daripada child
       nya dan Max Heap yang setiap node nya selalu lebih besar daripada child
       nya. Binary heap adalah sebuah Complete Binary Tree dimana, pada Complete
       Binary Tree setiap node pada ketinggian yang sama harus memiliki 2 child,
       kecuali node pada ketinggian terakhir, dan tidak boleh ada celah diantara
       leaf pada tree tersebut. Sehingga meskipun node pada ketinggian terakhir
       dapat memiliki kurang dari 2 child namun, jika ada child, maka child harus
       diisi dari kiri ke kanan tanpa melewatkan satu pun leaf yang bernilai null
       sebelumnya (seluruh leaf pada sebelah kiri sebuah node tidak boleh ada yang
       null).

     # Representasi Binary Heap Dengan Arary
       Cara merepresentasikan binary heap dengan array yaitu dengan melakukan
       level order traversal pada sebuah tree dan menyimpan nilai-nilainya pada
       array, dimulai dari indeks 1 (bukan 0). Lantas bagaimana cara menemukan
       child dari sebuah node pada binary heap? Child dari sebuah node pada
       binary heap dapat ditemukan dengan menggunakan rumus:
          - Left: 2k
          - Right: 2k + 1
       dimana `k` adalah indeks dari parent node. Rumus ini didapat dengan
       memperhatikan posisi elemen-elemen yang telah diakses dengan level order
       traversal. Sementara untuk menemukan parent dari sebuah indeks, dapat
       digunakan rumus:
          k / 2
       dimana k adalah indeks dari child node. Hasil pembagian dibulatkan ke
       bawah. Rumus diatas hanya dapat digunakan jika elemen pertama dimasukkan
       pada indeks 1.

----------------------------------------------------------------------------------